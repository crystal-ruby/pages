%section#intro
  %h1 RubyX
  %h2 community's ruby
  %p in 100% Ruby (compiler)
  %p No external dependencies
  %p Easy to understand
  %p Easy to join
%section#torsten
  %h2 Torsten
  %h3 rubydesign
  %p github, twitter, medium , .fi
  %p 30+ years coding
  %p Now coding as hobby
%section#method
  %h2 Method
  %h3 Chronological
  %p not top down / technical
  %p answer questions
%section#style
  %h2 Style
  %p ruby "happiness"
  %p programmers fulfillment
%section#study
  %h2 Why
  %p Studied physics
  %p Theoretical physics
  %h3 Bottomm Up thinking
%section#happiness
  %h2 Road to happiness
  %table
    %tr
      %td 1994
      %td Fortran
      %td ★☆☆☆☆
    %tr.fragment
      %td 1994
      %td C++
      %td ★★★☆☆☆
    %tr.fragment
      %td 1996
      %td java
      %td ★★★★☆
    %tr.fragment
      %td 2001
      %td ruby
      %td ★★★★★
  %h4.fragment but real happiness . . .

%section#finland
  %h2 1999 move to Finland
  %p
    %img{:alt => "Finland", "data-src" => image_url("slides/grillrb/finland.jpg")}/
%section#raisa
  %h2
    Raisa
    %small (2004 my wife)
  %p
    %img{:alt => "Raisa", "data-src" => image_url("slides/grillrb/raisa.jpg") , height: 400}/
%section#work
  %h2
    Woodwork
    %small (2010 ecoframe)
  %p
    %img{:alt => "At Work", "data-src" => image_url("slides/at_work.jpg") , height: 400}/

%section#smallalk
  %h2 1995: Smalltalk
  %p Popular 80’s , "Blue Book" published
  %p
    %img{:alt => "Blue book", "data-src" => image_url("slides/blue_book.png") , height: 200}/
  %p Read and tried, but failed

%section#db
  %h2 2008: Purple
  %p In memory db
  %p core judy (C), rest ruby
  %p super performance, until used from rails
  %h3 MRI has performance issues

%section#start
  %h2 2013: PI
  %p pi becomes an arduino
  %p.fragment laptop  becomes a pi
  %p.fragment
    Speed problem
    %b 10x
    possibly
    %b 30x
    sometimes
    %b 100x
%section#start2
  %p Start 2014 at Frozen rails
  %p.fragment started vm mindset
  %p.fragment main decisions
  %p.fragment good progress

%section#decision
  %h2 Early decisions
  %p OO calling
  %p memory design: cache size
  %p kernel calling
  %p microkernel

%section#no_vm
  %h2 Beginning
  %p learn arm
  %p check llvm and others
  %p 6 classes assembler
  %p 3 classes binary creation
  %p static binaries easy, 1 month
%section#calling
  %h2 Calling convention
  %p
    C or
    %span.red  no C
  %p object oriented
  %p named fields / instance vars
  %p simple, not too slow
  %p
    kernel calling much simpler:
    %span.red  no libc

%section#control
  %h2 Control Structures
  %p if / while / return
  %p risc / meta arm
  %p straight to risc
  %p relatively easy

%section#sending
  %h2 Dynamic calling
  %p very difficult
  %p many failed ideas
  %p "years" of trying
  %h3 decent layers

%section#demo
  %h2
    Demo of
    =link_to "cli" , "https://github.com/ruby-x/rubyx/blob/master/lib/rubyx/rubyxc.rb"
  %p
    %br
    =link_to "www.ruby-x.org" , "http://www.ruby-x.org"
  %p
    %br
    =link_to "github.com/ruby-x" , "https://github.com/ruby-x/rubyx"
